// Credits to UpcraftLP for the base build script


import java.time.Year
import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.3.0'
    id 'org.cadixdev.licenser' version '0.6.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.jfrog.artifactory' version '4.21.0'
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id 'com.modrinth.minotaur' version '1.2.1'
    id 'maven-publish'
    id 'java-library'
}

group = rootProject.maven_group
archivesBaseName = rootProject.name

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'com.matthewprenger.cursegradle'
    apply plugin: 'maven-publish'
    apply plugin: 'org.cadixdev.licenser'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'java-library'
}

allprojects {

    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16

    version = project.mod_version

    configurations {
        dev
    }

    configurations.all {
        resolutionStrategy {
            force "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cca_version}"
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    java {
        withSourcesJar()
    }

    apply from: rootProject.file('utilities.gradle')

    dependencies {
        //to change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        compileOnly "com.google.code.findbugs:jsr305:3.0.2"
        compileOnly "org.jetbrains:annotations:${jb_annotations_version}"
        compileOnly "org.apiguardian:apiguardian-api:${apiguardian_version}"
        compileOnly "com.demonwav.mcdev:annotations:1.0"

        testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.0-M1"
    }

    afterEvaluate {
        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }
    }

    license {
        header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

        matching('ladysnake/**/api/**') {
            header = rootProject.file("code_quality/${project.api_license_header}_HEADER.txt")
        }

        include '**/*.java'
        exclude '**/package-info.java'
        exclude '**/model/lib/**.java'

        //export variables
        ext {
            year = Year.now()
            projectDisplayName = rootProject.display_name
            projectOwners = rootProject.owners
            gplVersion = rootProject.gpl_version
        }

        newLine = false // Disables the empty line between the header and package name
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact(remapJar)
                artifact(sourcesJar) {
                    builtBy(remapSourcesJar)
                }

                if (project.tasks.findByName('javadocJar')) {
                    artifact project.tasks.getByName('javadocJar')
                }
            }
        }
    }
}

repositories {
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroupByRegex 'dev\\.emi.*'
            includeGroupByRegex 'io\\.github\\.onyxstudios.*'
        }
    }
    maven {
        url = 'https://maven.cafeteria.dev'
        content {
            includeGroup 'net.adriantodt.fabricmc'
        }
    }
    maven {
        name = 'CottonMC'
        url = 'https://server.bbkr.space/artifactory/libs-release'
        content {
            includeGroup 'io.github.cottonmc'
        }
    }
    maven {
        url = 'https://maven.jamieswhiteshirt.com/libs-release/'
        content {
            includeGroup 'com.jamieswhiteshirt'
        }
    }
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url 'https://maven.blamejared.com'
        content {
            includeGroupByRegex 'vazkii\\..*'
        }
    }
    maven {
        url = "https://maven.shedaniel.me/"
        content {
            includeGroupByRegex 'me\\.shedaniel\\..*'
            includeGroup 'me.sargunvohra.mcmods'
        }
    }
    maven {
        url = "https://maven.theillusivec4.top"
        content {
            includeGroupByRegex 'top\\.theillusivec4\\..*'
        }
    }
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
        content {
            includeGroup 'me.lucko'
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
        content {
            includeGroup 'com.terraformersmc'
            includeGroup 'dev.emi'
        }
    }
    maven {
        url = "https://maven.siphalor.de"
        content {
            includeGroup 'de.siphalor'
        }
    }
    maven {
        name = 'JitPack'
        url = 'https://jitpack.io'
        content {
            includeGroupByRegex '(io|com)\\.github\\..*'
        }
    }
    mavenLocal()
}

dependencies {
    api project(path: ":requiem-api", configuration: "dev")
    api project(path: ":requiem-core", configuration: "dev")
    // including too early causes a circular dependency somehow
    afterEvaluate {
        include project(":requiem-api")
        include project(":requiem-core")
    }

    // Required dependencies
    modApi "io.github.ladysnake:satin:${satin_version}"
    include "io.github.ladysnake:satin:${satin_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cca_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${cca_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${cca_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${cca_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-scoreboard:${cca_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-scoreboard:${cca_version}"
    // Required by automatone but nothing else
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:${cca_version}"
    modImplementation "io.github.ladysnake:PlayerAbilityLib:${pal_version}"
    include "io.github.ladysnake:PlayerAbilityLib:${pal_version}"
    modImplementation "io.github.ladysnake:locki:${locki_version}"
    include "io.github.ladysnake:locki:${locki_version}"
    modImplementation "io.github.ladysnake:impersonate:${impersonate_version}"
    include "io.github.ladysnake:impersonate:${impersonate_version}"
    modImplementation "io.github.ladysnake:automatone:${automatone_version}"
    include "io.github.ladysnake:automatone:${automatone_version}"
    modImplementation "dev.emi.chime:chime:${chime_version}"
    include "dev.emi.chime:chime:${chime_version}"
    modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${reach_version}"
    include "com.jamieswhiteshirt:reach-entity-attributes:${reach_version}"
    // Fiber is technically not a mod and could use implementation, however that leaves it out of the generated pom.xml
    modImplementation "me.zeroeightsix:fiber:${fiber_version}"
    include "me.zeroeightsix:fiber:${fiber_version}"
    modImplementation "me.lucko:fabric-permissions-api:${fpa_version}"
    include "me.lucko:fabric-permissions-api:${fpa_version}"
    // Optional dependencies
    modCompileOnly ("com.terraformersmc:modmenu:${modmenu_version}") { transitive = false }
    modRuntime ("com.terraformersmc:modmenu:${modmenu_version}") { transitive = false }
    modCompileOnly ("me.shedaniel.cloth:cloth-config-fabric:${cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modRuntime ("me.shedaniel.cloth:cloth-config-fabric:${cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modCompileOnly ("com.github.pyrofab:fibertocloth:${f2c_version}") { transitive = false }
    modRuntime ("com.github.pyrofab:fibertocloth:${f2c_version}") { transitive = false }
    include ("com.github.pyrofab:fibertocloth:${f2c_version}") { transitive = false }

    // Extra compatibility dependencies
//    modRuntime curse.resolve('immersive-portals-mod', 2845123)
//    modRuntime "curse.maven:mobz:2965825"
    modCompileOnly("curse.maven:Health-Overlay-Fabric-313219:3403605")
    modRuntime("curse.maven:Health-Overlay-Fabric-313219:3403605")
    modCompileOnly("io.github.CerulanLumina:better-graves:${better_graves_version}") { transitive = false }
//    modRuntime("io.github.CerulanLumina:better-graves:${better_graves_version}")
    modCompileOnly("io.github.Lemonszz:Biome-Makeover:${biome_makeover_version}")
//    modRuntime("io.github.Lemonszz:Biome-Makeover:${biome_makeover_version}")

    modRuntime "com.jamieswhiteshirt:reach-entity-attributes:${reach_version}"
    modRuntime "net.adriantodt.fabricmc:fallflyinglib:${fallflyinglib_version}"
    modCompileOnly "dev.emi:trinkets:${trinkets_version}"
    modCompileOnly("curse.maven:Pehkui-319596:${pehkui_version}") { transitive = false }
//    modRuntime("curse.maven:Pehkui-319596:${pehkui_version}") { transitive = false }
    modCompileOnly("curse.maven:Snow-Mercy-429949:${snowmercy_version}") { transitive = false }
//    modRuntime("curse.maven:Snow-Mercy-429949:${snowmercy_version}") { transitive = false }
    modCompileOnly("com.github.apace100:apoli:${apoli_version}") { transitive = false }
    modRuntime("com.github.apace100:apoli:${apoli_version}") { transitive = false }
    modCompileOnly("com.github.apace100:calio:${calio_version}") { transitive = false }
    modRuntime("com.github.apace100:calio:${calio_version}") { transitive = false }
    modCompileOnly("com.github.apace100:origins-fabric:${origins_version}") { transitive = false }
    modRuntime("com.github.apace100:origins-fabric:${origins_version}") { transitive = false }
    modRuntime "com.github.Globox1997:BackSlot:${backslot_version}"
    modCompileOnly("io.github.HyperPigeon:Eldritch-Mobs:${eldritch_mobs_version}") { transitive = false }
//    modRuntime "io.github.cottonmc:LibGui:${libgui_version}"
    modCompileOnly("curse.maven:haema-391257:${haema_version}")
    modRuntime("curse.maven:haema-391257:${haema_version}")
    modRuntime("top.theillusivec4.somnus:somnus-fabric:${somnus_version}")
    modRuntime("vazkii.patchouli:Patchouli:${project.patchouli_version}")
    modRuntime("net.fabricmc:fabric-language-kotlin:${flk_version}")
    modRuntime("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:${rootProject.cca_version}")
    modCompileOnly("curse.maven:golems-galore-387197:${golems_galore_version}")
//    modRuntime("curse.maven:golems-galore-387197:${golems_galore_version}")
//    modRuntime 'com.github.Draylar:structurized:1.3.0-21w20a'
    modCompileOnly("curse.maven:the-bumblezone-fabric-363949:${bumblezone_version}")
//    modRuntime("curse.maven:the-bumblezone-fabric-363949:${bumblezone_version}")
    modCompileOnly "curse.maven:bewitchment-394915:${bewitchment_version}"
}

remapJar.dependsOn(project(":requiem-core").tasks.remapJar)

jar {
    from 'LICENSE-CODE'
    from 'LICENSE-ART'
}

license {
    exclude '**/RayHelper.java'
}

ext {
    // no idea how else to import TaskModrinthUpload from release.gradle
    ModrinthUpload = TaskModrinthUpload
}

apply from: 'release.gradle'
