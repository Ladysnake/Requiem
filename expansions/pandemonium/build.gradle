archivesBaseName = "${rootProject.archivesBaseName}-${project.name.toLowerCase(Locale.ROOT)}"
group = "${rootProject.group}.${rootProject.archivesBaseName}"

repositories {
    mavenLocal()
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
        content {
            includeGroup 'io.github.ladysnake'
            includeGroupByRegex 'io\\.github\\.onyxstudios.*'
        }
    }
    maven {
        url = 'https://maven.jamieswhiteshirt.com/libs-release/'
        content {
            includeGroup 'com.jamieswhiteshirt'
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.shedaniel.me/"
        content {
            includeGroupByRegex 'me\\.shedaniel\\..*'
            includeGroup 'me.sargunvohra.mcmods'
        }
    }
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
        content {
            includeGroup 'me.lucko'
        }
    }
    maven {
        url = "https://maven.theillusivec4.top"
        content {
            includeGroupByRegex 'top\\.theillusivec4\\..*'
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
        content {
            includeGroup 'com.terraformersmc'
            includeGroup 'dev.emi'
        }
    }
    maven {
        name = 'JitPack'
        url = 'https://jitpack.io'
    }
}

dependencies {
    implementation project(path: ":requiem-api", configuration: "dev")
    implementation project(path: ":requiem-core", configuration: "dev")
    implementation project(path: ":", configuration: "dev")
    implementation project(path: ":pandemonium-api", configuration: "dev")
    include project(":pandemonium-api")
    modImplementation "io.github.ladysnake:satin:${satin_version}"
    modImplementation ("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${rootProject.cca_version}")
    modImplementation ("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:${rootProject.cca_version}")
    include ("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:${rootProject.cca_version}")
    modImplementation ("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-scoreboard:${cca_version}")
    modImplementation "me.lucko:fabric-permissions-api:${fpa_version}"
    modImplementation ("io.github.ladysnake:PlayerAbilityLib:${pal_version}")
    modImplementation ("io.github.ladysnake:locki:${locki_version}")
    modImplementation ("io.github.ladysnake:impersonate:${impersonate_version}") { transitive = false }
    modImplementation "io.github.ladysnake:automatone:${automatone_version}"
    implementation "me.zeroeightsix:fiber:${rootProject.fiber_version}"
//    modCompileOnly ("io.github.shedaniel:FiberToCloth:0907730") { transitive = false }
    modCompileOnly ("com.terraformersmc:modmenu:${modmenu_version}") { transitive = false }
    modCompileOnly ("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${rootProject.reach_version}"
    modImplementation("top.theillusivec4.somnus:somnus-fabric:${somnus_version}")
    modCompileOnly("com.github.apace100:origins-fabric:${rootProject.origins_version}") { transitive = false }
    modCompileOnly("curse.maven:haema-391257:${rootProject.haema_version}")
}

jar {
    from rootProject.files("LICENSE-CODE", "LICENSE-ART")
}

apply from: rootProject.file('utilities.gradle')

curseforge {
    apiKey = project.findProperty('curse_key') ?: ""

    if (project.hasProperty('curseforge_id')) {
        project {
            id = findProperty('curseforge_id')

            releaseType = project.release_type

            //usually automatically determined by the CurseGradle plugin, but won't work with fabric
            "${rootProject.curseforge_versions}".split('; ').each {
                addGameVersion it
            }
            addGameVersion 'Fabric'

            mainArtifact(remapJar) {
                displayName = "${project.name}-${project.version}.jar"

                if (project.hasProperty('cf_requirements') || project.hasProperty('cf_optionals') || project.hasProperty('cf_embeddeds') || project.hasProperty('cf_tools') || project.hasProperty('cf_incompatibles') || project.hasProperty('cf_includes')) {
                    relations {
                        if (project.hasProperty('cf_requirements')) {
                            "${project.cf_requirements}".split('; ').each {
                                requiredDependency "${it}"
                            }
                        }
                        if (project.hasProperty('cf_optionals')) {
                            "${project.cf_optionals}".split('; ').each {
                                optionalDependency "${it}"
                            }
                        }
                        if (project.hasProperty('cf_embeddeds')) {
                            "${project.cf_embeddeds}".split('; ').each {
                                embeddedLibrary "${it}"
                            }
                        }
                        if (project.hasProperty('cf_tools')) {
                            "${project.cf_tools}".split('; ').each {
                                tool "${it}"
                            }
                        }
                        if (project.hasProperty('cf_incompatibles')) {
                            "${project.cf_incompatibles}".split('; ').each {
                                incompatible "${it}"
                            }
                        }
                        if (project.hasProperty('cf_includes')) {
                            "${project.cf_includes}".split('; ').each {
                                include "${it}"
                            }
                        }
                    }
                }
            }

            changelogType = 'markdown'
            changelog = project.getChangelogText()

            afterEvaluate {
                uploadTask.dependsOn remapSourcesJar
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }
}
